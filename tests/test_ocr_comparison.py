import sys
import os
import time
import psutil
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
import tempfile
import threading
from concurrent.futures import ThreadPoolExecutor
import json
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from whisperbridge.core.ocr_manager import OCREngineManager, OCREngine
from whisperbridge.services.ocr_service import OCRService, OCRRequest


@dataclass
class ComparisonResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è OCR –¥–≤–∏–∂–∫–æ–≤."""
    engine: str
    text: str
    confidence: float
    processing_time: float
    memory_usage: float
    success: bool
    error: Optional[str] = None
    image_type: str = "unknown"
    languages: List[str] = None

    def __post_init__(self):
        if self.languages is None:
            self.languages = []


@dataclass
class TestScenario:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    name: str
    image: Image.Image
    expected_text: str
    languages: List[str]
    description: str


class OCRComparisonTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è OCR –¥–≤–∏–∂–∫–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞."""
        self.manager = OCREngineManager()
        self.service = OCRService()
        self.results: List[ComparisonResult] = []
        self.scenarios: List[TestScenario] = []
        self.performance_data: Dict[str, Any] = {}

    def create_test_scenarios(self) -> List[TestScenario]:
        """–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
        scenarios = []

        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        simple_img = self._create_simple_text_image("Hello World Test", "en")
        scenarios.append(TestScenario(
            name="simple_english",
            image=simple_img,
            expected_text="Hello World Test",
            languages=["en"],
            description="Simple English text on white background"
        ))

        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        multiline_img = self._create_multiline_image()
        scenarios.append(TestScenario(
            name="multiline_text",
            image=multiline_img,
            expected_text="First Line Second Line Third Line",
            languages=["en"],
            description="Multi-line text with structure"
        ))

        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞—à—É–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        noisy_img = self._create_noisy_image("Noisy Text Recognition")
        scenarios.append(TestScenario(
            name="noisy_text",
            image=noisy_img,
            expected_text="Noisy Text Recognition",
            languages=["en"],
            description="Text with random noise"
        ))

        # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π + —Ä—É—Å—Å–∫–∏–π)
        mixed_img = self._create_mixed_language_image()
        scenarios.append(TestScenario(
            name="multilingual",
            image=mixed_img,
            expected_text="Hello –ü—Ä–∏–≤–µ—Ç Test –¢–µ—Å—Ç",
            languages=["en", "ru"],
            description="Mixed English and Russian text"
        ))

        # –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ú–∞–ª–µ–Ω—å–∫–∏–π —à—Ä–∏—Ñ—Ç
        small_font_img = self._create_simple_text_image("Small Font Test", "en", font_size=12)
        scenarios.append(TestScenario(
            name="small_font",
            image=small_font_img,
            expected_text="Small Font Test",
            languages=["en"],
            description="Text with small font size"
        ))

        # –°—Ü–µ–Ω–∞—Ä–∏–π 6: –†–∞–∑–º—ã—Ç—ã–π —Ç–µ–∫—Å—Ç
        blurred_img = self._create_blurred_image("Blurred Text Test")
        scenarios.append(TestScenario(
            name="blurred_text",
            image=blurred_img,
            expected_text="Blurred Text Test",
            languages=["en"],
            description="Blurred text for quality testing"
        ))

        self.scenarios = scenarios
        return scenarios

    def _create_simple_text_image(self, text: str, lang: str, font_size: int = 20) -> Image.Image:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º."""
        width, height = 400, 100
        image = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(image)

        try:
            if lang == "ru":
                # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                font = ImageFont.truetype("arial.ttf", font_size)
            else:
                font = ImageFont.truetype("arial.ttf", font_size)
        except:
            font = ImageFont.load_default()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (width - text_width) // 2
        y = (height - text_height) // 2

        draw.text((x, y), text, fill='black', font=font)
        return image

    def _create_multiline_image(self) -> Image.Image:
        """–°–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        lines = ["First Line", "Second Line", "Third Line"]
        width, height = 300, 120
        image = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(image)

        try:
            font = ImageFont.truetype("arial.ttf", 16)
        except:
            font = ImageFont.load_default()

        y_offset = 20
        for line in lines:
            draw.text((20, y_offset), line, fill='black', font=font)
            y_offset += 30

        return image

    def _create_noisy_image(self, text: str) -> Image.Image:
        """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —à—É–º–æ–º."""
        image = self._create_simple_text_image(text, "en")

        # –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
        np_image = np.array(image)
        noise = np.random.randint(0, 30, np_image.shape, dtype=np.uint8)
        noisy_image = np.clip(np_image + noise, 0, 255).astype(np.uint8)

        return Image.fromarray(noisy_image)

    def _create_mixed_language_image(self) -> Image.Image:
        """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏."""
        text = "Hello –ü—Ä–∏–≤–µ—Ç Test –¢–µ—Å—Ç"
        width, height = 500, 100
        image = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(image)

        try:
            font = ImageFont.truetype("arial.ttf", 18)
        except:
            font = ImageFont.load_default()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (width - text_width) // 2
        y = (height - text_height) // 2

        draw.text((x, y), text, fill='black', font=font)
        return image

    def _create_blurred_image(self, text: str) -> Image.Image:
        """–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–º—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        image = self._create_simple_text_image(text, "en")

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º—ã—Ç–∏–µ
        from PIL import ImageFilter
        return image.filter(ImageFilter.GaussianBlur(radius=1))

    def measure_performance(self, image_path: str,
                           languages: List[str], iterations: int = 3) -> Dict[str, Any]:
        """–ò–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å EasyOCR."""
        engine = OCREngine.EASYOCR
        if not self.manager.is_engine_available(engine):
            return {
                'engine': engine.value,
                'available': False,
                'error': f'Engine {engine.value} not available'
            }

        process_times = []
        memory_usages = []
        results = []

        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB

        for i in range(iterations):
            # –ò–∑–º–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            mem_before = process.memory_info().rss / 1024 / 1024

            start_time = time.time()
            result = self.manager.process_image(image_path, languages)
            end_time = time.time()

            # –ò–∑–º–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mem_after = process.memory_info().rss / 1024 / 1024

            process_times.append(end_time - start_time)
            memory_usages.append(mem_after - mem_before)
            results.append(result)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(0.05)

        avg_time = sum(process_times) / len(process_times)
        avg_memory = sum(memory_usages) / len(memory_usages)

        successful_results = [r for r in results if r.success]
        avg_confidence = sum(r.confidence for r in successful_results) / len(successful_results) if successful_results else 0.0

        return {
            'engine': engine.value,
            'available': True,
            'avg_processing_time': avg_time,
            'avg_memory_usage': avg_memory,
            'avg_confidence': avg_confidence,
            'success_rate': len(successful_results) / len(results),
            'iterations': iterations
        }

    def compare_engines(self) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±–∞ –¥–≤–∏–∂–∫–∞ –Ω–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö."""
        print("üöÄ Starting OCR Engine Comparison")
        print("=" * 60)

        comparison_results = {
            'scenarios': [],
            'performance': {},
            'issues': [],
            'recommendations': []
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤
        print("üìã Initializing OCR engines...")
        engines_initialized = []

        # Initialize EasyOCR engine
        start_time = time.time()
        success = self.manager.initialize_engine(OCREngine.EASYOCR, ["en", "ru"])
        init_time = time.time() - start_time

        if success:
            engines_initialized.append(OCREngine.EASYOCR)
            print(".3f")
        else:
            print("‚ùå EASYOCR initialization failed"

        if not engines_initialized:
            comparison_results['issues'].append("No OCR engines could be initialized")
            return comparison_results

        # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = self.create_test_scenarios()
        print(f"üì∏ Created {len(scenarios)} test scenarios")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        for scenario in scenarios:
            print(f"\nüîç Testing scenario: {scenario.name}")
            print(f"   Description: {scenario.description}")

            scenario_results = {
                'name': scenario.name,
                'description': scenario.description,
                'expected_text': scenario.expected_text,
                'engines': {}
            }

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = None
            try:
                # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
                    temp_path = temp_file.name
                    scenario.image.save(temp_path, 'PNG')

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                time.sleep(0.1)

                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫
                for engine in engines_initialized:
                    print(f"   Testing {engine.value.upper()}...")

                    perf_data = self.measure_performance(
                        temp_path, scenario.languages
                    )

                    if perf_data['available']:
                        # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        result = ComparisonResult(
                            engine=engine.value,
                            text="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ perf_data –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            confidence=perf_data['avg_confidence'],
                            processing_time=perf_data['avg_processing_time'],
                            memory_usage=perf_data['avg_memory_usage'],
                            success=perf_data['success_rate'] > 0,
                            image_type=scenario.name,
                            languages=scenario.languages
                        )

                        scenario_results['engines'][engine.value] = {
                            'performance': perf_data,
                            'result': result
                        }

                        print(f"     Time: {perf_data['avg_processing_time']:.3f}s, "
                              f"Confidence: {perf_data['avg_confidence']:.1f}, "
                              f"Success: {perf_data['success_rate']:.3f}")

                        self.results.append(result)
                    else:
                        print(f"   ‚ùå {engine.value.upper()} not available")

            except Exception as e:
                print(f"   ‚ùå Error testing scenario {scenario.name}: {e}")
                scenario_results['error'] = str(e)
            finally:
                # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if temp_path and os.path.exists(temp_path):
                    for attempt in range(5):
                        try:
                            os.unlink(temp_path)
                            break
                        except OSError:
                            if attempt < 4:
                                time.sleep(0.2)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            else:
                                print(f"   ‚ö†Ô∏è  Could not delete temp file: {temp_path}")

            comparison_results['scenarios'].append(scenario_results)

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        comparison_results['issues'] = self._analyze_issues(comparison_results)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        comparison_results['recommendations'] = self._generate_recommendations(comparison_results)

        return comparison_results

    def _analyze_issues(self, comparison_results: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–≤–∏–∂–∫–æ–≤
        available_engines = [e.value for e in self.manager.get_available_engines()]
        if len(available_engines) < 2:
            issues.append(f"Only {len(available_engines)} OCR engines available: {available_engines}")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        for scenario in comparison_results['scenarios']:
            for engine_name, engine_data in scenario['engines'].items():
                perf = engine_data['performance']

                if perf['avg_processing_time'] > 2.0:
                    issues.append(f"Slow processing in {scenario['name']} for {engine_name}: {perf['avg_processing_time']:.3f}s")

                if perf['success_rate'] < 0.5:
                    issues.append(f"Low success rate in {scenario['name']} for {engine_name}: {perf['success_rate']:.1%}")


        return issues

    def _generate_recommendations(self, comparison_results: Dict[str, Any]) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
        recommendations = []

        available_engines = [e.value for e in self.manager.get_available_engines()]

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–≤–∏–∂–∫–∞–º
        if len(available_engines) == 0:
            recommendations.append("Install EasyOCR engine")
        elif len(available_engines) == 1:
            recommendations.append("EasyOCR engine is available and working")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        slow_scenarios = []
        for scenario in comparison_results['scenarios']:
            for engine_name, engine_data in scenario['engines'].items():
                if engine_data['performance']['avg_processing_time'] > 1.0:
                    slow_scenarios.append(f"{scenario['name']} ({engine_name})")

        if slow_scenarios:
            recommendations.append(f"Optimize performance for slow scenarios: {', '.join(slow_scenarios[:3])}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        low_quality_scenarios = []
        for scenario in comparison_results['scenarios']:
            for engine_name, engine_data in scenario['engines'].items():
                if engine_data['performance']['success_rate'] < 0.7:
                    low_quality_scenarios.append(f"{scenario['name']} ({engine_name})")

        if low_quality_scenarios:
            recommendations.append(f"Improve OCR quality for: {', '.join(low_quality_scenarios[:3])}")

        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "Consider implementing direct numpy array processing to avoid temporary files",
            "Add better error handling for edge cases (empty images, corrupted files)",
            "Implement adaptive confidence thresholds based on image quality",
            "Consider caching frequently used OCR results",
            "Add image preprocessing options (contrast enhancement, noise reduction)"
        ])

        return recommendations

    def generate_report(self, comparison_results: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        report_lines = []
        report_lines.append("=" * 80)
        report_lines.append("OCR ENGINE COMPARISON REPORT")
        report_lines.append("=" * 80)
        report_lines.append(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append("")

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report_lines.append("üìä OVERVIEW")
        report_lines.append("-" * 40)

        available_engines = [e.value for e in self.manager.get_available_engines()]
        report_lines.append(f"Available engines: {', '.join(available_engines) if available_engines else 'None'}")
        report_lines.append(f"Test scenarios: {len(comparison_results['scenarios'])}")
        report_lines.append("")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
        report_lines.append("üîç SCENARIO RESULTS")
        report_lines.append("-" * 40)

        for scenario in comparison_results['scenarios']:
            report_lines.append(f"\nScenario: {scenario['name']}")
            report_lines.append(f"Description: {scenario['description']}")
            report_lines.append(f"Expected: {scenario['expected_text']}")

            for engine_name, engine_data in scenario['engines'].items():
                perf = engine_data['performance']
                report_lines.append(f"  {engine_name.upper()}:")
                report_lines.append(f"    - Processing time: {perf['avg_processing_time']:.3f}s")
                report_lines.append(f"    - Confidence: {perf['avg_confidence']:.3f}")
                report_lines.append(f"    - Success rate: {perf['success_rate']:.1%}")
                report_lines.append(f"    - Memory usage: {perf['avg_memory_usage']:.1f}MB")

        # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if comparison_results['issues']:
            report_lines.append("\n‚ö†Ô∏è  IDENTIFIED ISSUES")
            report_lines.append("-" * 40)
            for i, issue in enumerate(comparison_results['issues'], 1):
                report_lines.append(f"{i}. {issue}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if comparison_results['recommendations']:
            report_lines.append("\nüí° RECOMMENDATIONS")
            report_lines.append("-" * 40)
            for i, rec in enumerate(comparison_results['recommendations'], 1):
                report_lines.append(f"{i}. {rec}")

        report_lines.append("\n" + "=" * 80)
        report_lines.append("END OF REPORT")
        report_lines.append("=" * 80)

        return "\n".join(report_lines)

    def run_comparison(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."""
        print("üéØ Starting Comprehensive OCR Comparison Test")
        print("=" * 60)

        try:
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            comparison_results = self.compare_engines()

            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
            report = self.generate_report(comparison_results)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            report_path = "ocr_comparison_report.txt"
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)

            print(f"\nüìÑ Report saved to: {report_path}")

            # –í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
            print("\n" + "=" * 60)
            print("SUMMARY")
            print("=" * 60)

            available_engines = [e.value for e in self.manager.get_available_engines()]
            print(f"‚úÖ Available engines: {len(available_engines)}")
            print(f"‚úÖ Test scenarios completed: {len(comparison_results['scenarios'])}")
            print(f"‚ö†Ô∏è  Issues identified: {len(comparison_results['issues'])}")
            print(f"üí° Recommendations: {len(comparison_results['recommendations'])}")

            if comparison_results['issues']:
                print("\nTop issues:")
                for i, issue in enumerate(comparison_results['issues'][:3], 1):
                    print(f"  {i}. {issue}")

            return {
                'success': True,
                'results': comparison_results,
                'report': report,
                'report_path': report_path
            }

        except Exception as e:
            error_msg = f"Comparison test failed: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞."""
    print("üî¨ OCR Test Suite")
    print("Testing EasyOCR performance and accuracy")
    print("=" * 60)

    # –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
    tester = OCRComparisonTest()
    result = tester.run_comparison()

    if result['success']:
        print("\n‚úÖ Test completed successfully!")
        print(f"üìÑ Detailed report saved to: {result['report_path']}")
    else:
        print(f"\n‚ùå Test failed: {result['error']}")
        sys.exit(1)


if __name__ == "__main__":
    main()